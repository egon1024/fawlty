{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fawlty Documentation \u00b6 Library for interacting with a SensuGo server. Overview \u00b6 This library was born of a desire to be able to more directly and easily interface with a SenguGo server. It is written to cover the use cases that I personally need, but I am open to requests and (especially) pull requests to cover features beyond my own needs. Author \u00b6 Cole Tuininga ( cole.tuininga@gmail.com )","title":"Home"},{"location":"#fawlty_documentation","text":"Library for interacting with a SensuGo server.","title":"fawlty Documentation"},{"location":"#overview","text":"This library was born of a desire to be able to more directly and easily interface with a SenguGo server. It is written to cover the use cases that I personally need, but I am open to requests and (especially) pull requests to cover features beyond my own needs.","title":"Overview"},{"location":"#author","text":"Cole Tuininga ( cole.tuininga@gmail.com )","title":"Author"},{"location":"about/","text":"","title":"About"},{"location":"client/","text":"Client \u00b6 Client \u00b6 In order to instantiate a client, one must import the SensuServer and SensuClient classes. A SensuServer defines the parameters for accessing a given Sensu server. The SensuClient is the wrapper that provides a simpler interface for talking to the server. Classes \u00b6 SensuServer \u00b6 from fawlty.sensu_server import SensuServer The fields supported by a SensuServer when being instantiated: host (required) The hostname or IP address of the Sensu server port Integer representing the port number to connect to. ( Default: 8080 ) use_ssl : Boolean indicating whether the connection should be ssl encrypted. ( Default: False ) ignore_cert : Boolean indicating if the remote certificate validation should be performed. Set to True when connecting to a server using a self-signed certificate, to avoid errors. ( Default: False ) SensuClient \u00b6 from fawlty.sensu_server import SensuServer from fawlty.sensu_client import SensuClient For the most part, after creating a client instance, direct action with it will be minimal. The primary use will be to pass to resource classes and objects. Currently, login only supports username/password and not an API token. After instantiation (which requires a (#SensuServer) object), the login method of the instance will establish a session with the Sensu API. After login, the API will provide a session token which will be tracked by the client object in the token attribute. The client object will attempt to refresh a token if it is discovered to be close to expiration. If the application code wishes to refresh a token, it can do so by calling the refresh_token method of the client instance. Sample code \u00b6 from fawlty.client import SensuClient from fawlty.sensu_server import SensuServer import fawlty.resources s = SensuServer(host=\"localhost\") client = SensuClient(server=s) client.login(\"basil\", \"fawlty\") # Add a namespace new_ns = sensu.resources.namespace.Namespace( name=\"sybil\" ) new_ns.set_client(client) new_ns.create() # Get the list of all namespaces namespaces = fawlty.resources.namespace.Namespace.get(client=client) print(f\"Namespaces: {namespaces})","title":"Client"},{"location":"client/#client","text":"","title":"Client"},{"location":"client/#client_1","text":"In order to instantiate a client, one must import the SensuServer and SensuClient classes. A SensuServer defines the parameters for accessing a given Sensu server. The SensuClient is the wrapper that provides a simpler interface for talking to the server.","title":"Client"},{"location":"client/#classes","text":"","title":"Classes"},{"location":"client/#sensuserver","text":"from fawlty.sensu_server import SensuServer The fields supported by a SensuServer when being instantiated: host (required) The hostname or IP address of the Sensu server port Integer representing the port number to connect to. ( Default: 8080 ) use_ssl : Boolean indicating whether the connection should be ssl encrypted. ( Default: False ) ignore_cert : Boolean indicating if the remote certificate validation should be performed. Set to True when connecting to a server using a self-signed certificate, to avoid errors. ( Default: False )","title":"SensuServer"},{"location":"client/#sensuclient","text":"from fawlty.sensu_server import SensuServer from fawlty.sensu_client import SensuClient For the most part, after creating a client instance, direct action with it will be minimal. The primary use will be to pass to resource classes and objects. Currently, login only supports username/password and not an API token. After instantiation (which requires a (#SensuServer) object), the login method of the instance will establish a session with the Sensu API. After login, the API will provide a session token which will be tracked by the client object in the token attribute. The client object will attempt to refresh a token if it is discovered to be close to expiration. If the application code wishes to refresh a token, it can do so by calling the refresh_token method of the client instance.","title":"SensuClient"},{"location":"client/#sample_code","text":"from fawlty.client import SensuClient from fawlty.sensu_server import SensuServer import fawlty.resources s = SensuServer(host=\"localhost\") client = SensuClient(server=s) client.login(\"basil\", \"fawlty\") # Add a namespace new_ns = sensu.resources.namespace.Namespace( name=\"sybil\" ) new_ns.set_client(client) new_ns.create() # Get the list of all namespaces namespaces = fawlty.resources.namespace.Namespace.get(client=client) print(f\"Namespaces: {namespaces})","title":"Sample code"},{"location":"resources/asset/","text":"Asset \u00b6 Sensu documentation \u00b6 Assets API Class: Asset \u00b6 This class represents a Sensu asset. The fields for an asset are: url (str) sha512 (str) filters (list) headers (dict) metadata AssetMetadata Example: from fawlty.resource.asset import Asset data = { \"url\": \"https://github.com/sensu/sensu-slack-handler/releases/download/1.0.3/sensu-slack-handler_1.0.3_linux_amd64.tar.gz\", \"sha512\": \"68720865127fbc7c2fe16ca4d7bbf2a187a2df703f4b4acae1c93e8a66556e9079e1270521999b5871473e6c851f51b34097c54fdb8d18eedb7064df9019adc8\" \"headers\": { \"X-Forwarded-For\": \"The Germans\", } \"metadata\": { \"name\": \"sensu-slack-handler\", \"namespace\": \"default\", \"labels\": {\"somelabel\": \"somevalue\"}, \"annotations\": {\"manuel\": \"barcelona\"} } } a = Asset(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Asset class (see example above). AssetMetadata","title":"Asset"},{"location":"resources/asset/#asset","text":"","title":"Asset"},{"location":"resources/asset/#sensu_documentation","text":"Assets API","title":"Sensu documentation"},{"location":"resources/asset/#class_asset","text":"This class represents a Sensu asset. The fields for an asset are: url (str) sha512 (str) filters (list) headers (dict) metadata AssetMetadata Example: from fawlty.resource.asset import Asset data = { \"url\": \"https://github.com/sensu/sensu-slack-handler/releases/download/1.0.3/sensu-slack-handler_1.0.3_linux_amd64.tar.gz\", \"sha512\": \"68720865127fbc7c2fe16ca4d7bbf2a187a2df703f4b4acae1c93e8a66556e9079e1270521999b5871473e6c851f51b34097c54fdb8d18eedb7064df9019adc8\" \"headers\": { \"X-Forwarded-For\": \"The Germans\", } \"metadata\": { \"name\": \"sensu-slack-handler\", \"namespace\": \"default\", \"labels\": {\"somelabel\": \"somevalue\"}, \"annotations\": {\"manuel\": \"barcelona\"} } } a = Asset(**data) a.set_client(my_client) a.create()","title":"Class: Asset"},{"location":"resources/asset/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Asset class (see example above). AssetMetadata","title":"Other Classes"},{"location":"resources/check/","text":"Check \u00b6 Sensu documentation \u00b6 Checks API Class: Check \u00b6 This class represents a Sensu check. The fields for a check are: check_hooks (list) command (str) cron (str) env_vars : (list) handlers : (list) high_flap_threshold (int) low_flap_threshold (int) output_metric_format (int) output_metric_handlers (list) output_metric_tags (list) output_metric_thresholds (list) pipelines (list) proxy_entity_name (str) publish (bool) round_robin (bool) runtime_assets (list) scheduler (str) secrets (list) silenced (list) stdin (bool) subdues (list) subscriptions (list) timeout (int) ttl (int) Example: from fawlty.resource.check import Check data = { \"command\": \"check-cpu-usage -w 75 -c 90\", \"handlers\": [], \"high_flap_threshold\": 0, \"interval\": 60, \"low_flap_threshold\": 0, \"public\": True, \"runtime_assets\": [ \"check-cpu-usage\" ], \"subscriptions\": [ \"system\" ], \"proxy_entity_name\": \"\", \"check_hooks\": None, \"stdin\": False, \"subdue\": None, \"ttl\": 0, \"timeout\": 0, \"round_robin\": False, \"output_metric_format\": \"\", \"output_metric_handlers\": None, \"env_vars\": None, \"metadata\": { \"name\": \"check_cpu\", \"namespace\": \"default\", \"labels\": {}, \"annotations\": {}, }, \"secrets\": None, \"pipelines\": None, } c = Check(**data) c.set_client(my_client) c.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Check class (see example above). CheckMetadata CheckMetricTag CheckMetricThreshold CheckOutputMetricThreshold CheckPipeline CheckProxyRequests","title":"Check"},{"location":"resources/check/#check","text":"","title":"Check"},{"location":"resources/check/#sensu_documentation","text":"Checks API","title":"Sensu documentation"},{"location":"resources/check/#class_check","text":"This class represents a Sensu check. The fields for a check are: check_hooks (list) command (str) cron (str) env_vars : (list) handlers : (list) high_flap_threshold (int) low_flap_threshold (int) output_metric_format (int) output_metric_handlers (list) output_metric_tags (list) output_metric_thresholds (list) pipelines (list) proxy_entity_name (str) publish (bool) round_robin (bool) runtime_assets (list) scheduler (str) secrets (list) silenced (list) stdin (bool) subdues (list) subscriptions (list) timeout (int) ttl (int) Example: from fawlty.resource.check import Check data = { \"command\": \"check-cpu-usage -w 75 -c 90\", \"handlers\": [], \"high_flap_threshold\": 0, \"interval\": 60, \"low_flap_threshold\": 0, \"public\": True, \"runtime_assets\": [ \"check-cpu-usage\" ], \"subscriptions\": [ \"system\" ], \"proxy_entity_name\": \"\", \"check_hooks\": None, \"stdin\": False, \"subdue\": None, \"ttl\": 0, \"timeout\": 0, \"round_robin\": False, \"output_metric_format\": \"\", \"output_metric_handlers\": None, \"env_vars\": None, \"metadata\": { \"name\": \"check_cpu\", \"namespace\": \"default\", \"labels\": {}, \"annotations\": {}, }, \"secrets\": None, \"pipelines\": None, } c = Check(**data) c.set_client(my_client) c.create()","title":"Class: Check"},{"location":"resources/check/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Check class (see example above). CheckMetadata CheckMetricTag CheckMetricThreshold CheckOutputMetricThreshold CheckPipeline CheckProxyRequests","title":"Other Classes"},{"location":"resources/clusterrole/","text":"ClusterRole \u00b6 Sensu documentation \u00b6 ClusterRoles API Class: ClusterRole \u00b6 This class represents a Sensu clusterrole. The fields for an clusterrole are: rules (list of ClusterRoleRule) metadata (ClusterRoleMetadata) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, }, \"rules\": [ {\"verbs\": [\"get\"], \"resources\": [\"*\"]}, ], } a = ClusterRole(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the ClusterRole class (see example above). ClusterRoleMetadata ClusterRoleRule","title":"ClusterRole"},{"location":"resources/clusterrole/#clusterrole","text":"","title":"ClusterRole"},{"location":"resources/clusterrole/#sensu_documentation","text":"ClusterRoles API","title":"Sensu documentation"},{"location":"resources/clusterrole/#class_clusterrole","text":"This class represents a Sensu clusterrole. The fields for an clusterrole are: rules (list of ClusterRoleRule) metadata (ClusterRoleMetadata) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, }, \"rules\": [ {\"verbs\": [\"get\"], \"resources\": [\"*\"]}, ], } a = ClusterRole(**data) a.set_client(my_client) a.create()","title":"Class: ClusterRole"},{"location":"resources/clusterrole/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the ClusterRole class (see example above). ClusterRoleMetadata ClusterRoleRule","title":"Other Classes"},{"location":"resources/clusterrolebinding/","text":"ClusterRoleBinding \u00b6 Sensu documentation \u00b6 ClusterRoles API Class: ClusterRoleBinding \u00b6 This class represents a Sensu clusterrolebinding. The fields for an clusterrolebinding are: role_ref (ClusterRoleBindingRoleRef) subjects (list) metadata (ClusterRoleBindingMetadata) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, }, \"role_ref\": { \"name\": \"cluster role name\", }, \"subjects\": [ {\"type\": \"Group\", \"name\": \"customers\"}, {\"type\": \"User\", \"name\": \"major_gowen\"} ], } a = ClusterRoleBinding(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the ClusterRoleBinding class (see example above). ClusterRoleBindingMetadata ClusterRoleBindingSubject ClusterRoleBindingRoleRef","title":"ClusterRoleBinding"},{"location":"resources/clusterrolebinding/#clusterrolebinding","text":"","title":"ClusterRoleBinding"},{"location":"resources/clusterrolebinding/#sensu_documentation","text":"ClusterRoles API","title":"Sensu documentation"},{"location":"resources/clusterrolebinding/#class_clusterrolebinding","text":"This class represents a Sensu clusterrolebinding. The fields for an clusterrolebinding are: role_ref (ClusterRoleBindingRoleRef) subjects (list) metadata (ClusterRoleBindingMetadata) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, }, \"role_ref\": { \"name\": \"cluster role name\", }, \"subjects\": [ {\"type\": \"Group\", \"name\": \"customers\"}, {\"type\": \"User\", \"name\": \"major_gowen\"} ], } a = ClusterRoleBinding(**data) a.set_client(my_client) a.create()","title":"Class: ClusterRoleBinding"},{"location":"resources/clusterrolebinding/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the ClusterRoleBinding class (see example above). ClusterRoleBindingMetadata ClusterRoleBindingSubject ClusterRoleBindingRoleRef","title":"Other Classes"},{"location":"resources/entity/","text":"Entity \u00b6 Sensu documentation \u00b6 Entity API Class: Entity \u00b6 This class represents a Sensu entity. The fields for an entity are: metadata (EntityMetadata) deregister (bool) deregistration (dict) entity_class (str) last_seen (int) redact (list) sensu_agent_version 1 (str) subscriptions (list) system 1 (dict) user (str) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"torquay\", }, 'entity_class': 'agent', 'subscriptions': ['DailyExpress'], 'deregister': False, 'redact': ['horse_race'], } a = Entity(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Entity class (see example above). EntityMetadata Read only attribute \u21a9 \u21a9","title":"Entity"},{"location":"resources/entity/#entity","text":"","title":"Entity"},{"location":"resources/entity/#sensu_documentation","text":"Entity API","title":"Sensu documentation"},{"location":"resources/entity/#class_entity","text":"This class represents a Sensu entity. The fields for an entity are: metadata (EntityMetadata) deregister (bool) deregistration (dict) entity_class (str) last_seen (int) redact (list) sensu_agent_version 1 (str) subscriptions (list) system 1 (dict) user (str) Example: from fawlty.resource.clusterrole import ClusterRole data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"torquay\", }, 'entity_class': 'agent', 'subscriptions': ['DailyExpress'], 'deregister': False, 'redact': ['horse_race'], } a = Entity(**data) a.set_client(my_client) a.create()","title":"Class: Entity"},{"location":"resources/entity/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Entity class (see example above). EntityMetadata Read only attribute \u21a9 \u21a9","title":"Other Classes"},{"location":"resources/event/","text":"Asset \u00b6 Sensu documentation \u00b6 Events API Class: Event \u00b6 This class represents a Sensu event. Example: from fawlty.resource.event import Event a = Asset(**data) a.set_client(my_client) a.create() events = my_client.resource_get( cls=fawlty.resources.event.Event, get_url=fawlty.resources.event.Event.get_url(namespace=\"default\") ) for event in events: if event.check.state != \"passing\": print(\"XX Event: \" f\"{event.entity.metadata.name}/{event.check.metadata.name}: \" f\"{event.check.state}\") else: print(\" * Event: \" f\"{event.entity.metadata.name}/{event.check.metadata.name}: \" f\"{event.check.state}\") Other Classes \u00b6 There are several auxilary classes that accompany events, many because they are very similar to the \"normal\" resource counterpart, but with addtional fields. EventMetadata EventCheckMetadata EventCheckHistory EventCheckMetricTag EvenCheckSecret EventCheckSubdue EventCheck EventEntityMetadata EventEntity","title":"Event"},{"location":"resources/event/#asset","text":"","title":"Asset"},{"location":"resources/event/#sensu_documentation","text":"Events API","title":"Sensu documentation"},{"location":"resources/event/#class_event","text":"This class represents a Sensu event. Example: from fawlty.resource.event import Event a = Asset(**data) a.set_client(my_client) a.create() events = my_client.resource_get( cls=fawlty.resources.event.Event, get_url=fawlty.resources.event.Event.get_url(namespace=\"default\") ) for event in events: if event.check.state != \"passing\": print(\"XX Event: \" f\"{event.entity.metadata.name}/{event.check.metadata.name}: \" f\"{event.check.state}\") else: print(\" * Event: \" f\"{event.entity.metadata.name}/{event.check.metadata.name}: \" f\"{event.check.state}\")","title":"Class: Event"},{"location":"resources/event/#other_classes","text":"There are several auxilary classes that accompany events, many because they are very similar to the \"normal\" resource counterpart, but with addtional fields. EventMetadata EventCheckMetadata EventCheckHistory EventCheckMetricTag EvenCheckSecret EventCheckSubdue EventCheck EventEntityMetadata EventEntity","title":"Other Classes"},{"location":"resources/filter/","text":"Filter \u00b6 Sensu documentation \u00b6 Filter API Class: Filter \u00b6 This class represents a Sensu filter. The fields for a filter are: action (str) expressions : (list) runtime_assets : (list) metadata (FilterMetadata) Example: from fawlty.resource.filter import Filter data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"action\": \"allow\", \"expressions\": [ \"event.check.occurrences == 1\", \"event.check.occurrences > 1\", ] \"runtime_assets\": [], } a = Filter(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Filter class (see example above). FilterMetadata","title":"Filter"},{"location":"resources/filter/#filter","text":"","title":"Filter"},{"location":"resources/filter/#sensu_documentation","text":"Filter API","title":"Sensu documentation"},{"location":"resources/filter/#class_filter","text":"This class represents a Sensu filter. The fields for a filter are: action (str) expressions : (list) runtime_assets : (list) metadata (FilterMetadata) Example: from fawlty.resource.filter import Filter data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"action\": \"allow\", \"expressions\": [ \"event.check.occurrences == 1\", \"event.check.occurrences > 1\", ] \"runtime_assets\": [], } a = Filter(**data) a.set_client(my_client) a.create()","title":"Class: Filter"},{"location":"resources/filter/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Filter class (see example above). FilterMetadata","title":"Other Classes"},{"location":"resources/handler/","text":"Handler \u00b6 Sensu documentation \u00b6 Handler API Class: Handler \u00b6 This class represents a Sensu handler. The fields for a handler are: type (str) command (str) env_vars (list) filters (list) handlers (list) mutator (str) runtime_assets (list) secrets (list) socket (HandlerSocket) timeout (int) metadata (HandlerMetadata) Example: from fawlty.resource.handler import Handler data = { \"metadata\": { \"name\": \"slack\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": 'sensu-slack-handler -c \"${SLACK_CHANNEL}\" -w \"${SLACK_WEBHOOK}\"', \"env_vars\": [ \"SLACK_WEBHOOK=https://hooks.slack.com/services/redacted\", \"SLACK_CHANNEL=#sensu\", ], \"filters\": [\"filter_interval_60_bihourly\"], \"handlers\": None, \"runtime_assets\": \"sensu-slack-handler\", \"timeout: \"0\", \"type\": \"pipe\", } a = Handler(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Handler class (see example above). HandlerMetadata HandlerSocket","title":"Handler"},{"location":"resources/handler/#handler","text":"","title":"Handler"},{"location":"resources/handler/#sensu_documentation","text":"Handler API","title":"Sensu documentation"},{"location":"resources/handler/#class_handler","text":"This class represents a Sensu handler. The fields for a handler are: type (str) command (str) env_vars (list) filters (list) handlers (list) mutator (str) runtime_assets (list) secrets (list) socket (HandlerSocket) timeout (int) metadata (HandlerMetadata) Example: from fawlty.resource.handler import Handler data = { \"metadata\": { \"name\": \"slack\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": 'sensu-slack-handler -c \"${SLACK_CHANNEL}\" -w \"${SLACK_WEBHOOK}\"', \"env_vars\": [ \"SLACK_WEBHOOK=https://hooks.slack.com/services/redacted\", \"SLACK_CHANNEL=#sensu\", ], \"filters\": [\"filter_interval_60_bihourly\"], \"handlers\": None, \"runtime_assets\": \"sensu-slack-handler\", \"timeout: \"0\", \"type\": \"pipe\", } a = Handler(**data) a.set_client(my_client) a.create()","title":"Class: Handler"},{"location":"resources/handler/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Handler class (see example above). HandlerMetadata HandlerSocket","title":"Other Classes"},{"location":"resources/hook/","text":"Hook \u00b6 Sensu documentation \u00b6 Hook API Class: Hook \u00b6 This class represents a Sensu hook. The fields for a hook are: command (str) runtime_assets (list) stdin (bool) timeout (int) metadata (HookMetadata) Example: from fawlty.resource.hook import Hook data = { \"metadata\": { \"name\": \"upgradable_packages\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": \"apt list --upgradable\", \"runtime_assets\": None, \"stdin\": False, \"timeout\": 60 } a = Hook(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Hook class (see example above). HookMetadata","title":"Hook"},{"location":"resources/hook/#hook","text":"","title":"Hook"},{"location":"resources/hook/#sensu_documentation","text":"Hook API","title":"Sensu documentation"},{"location":"resources/hook/#class_hook","text":"This class represents a Sensu hook. The fields for a hook are: command (str) runtime_assets (list) stdin (bool) timeout (int) metadata (HookMetadata) Example: from fawlty.resource.hook import Hook data = { \"metadata\": { \"name\": \"upgradable_packages\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": \"apt list --upgradable\", \"runtime_assets\": None, \"stdin\": False, \"timeout\": 60 } a = Hook(**data) a.set_client(my_client) a.create()","title":"Class: Hook"},{"location":"resources/hook/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Hook class (see example above). HookMetadata","title":"Other Classes"},{"location":"resources/mutator/","text":"Mutator \u00b6 Sensu documentation \u00b6 Mutator API Class: Mutator \u00b6 This class represents a Sensu mutator. The fields for a mutator are: command (str) env_vars (list) eval (str) runtime_assets (list) secrets (list) timeout (int) type (str) metadata (MutatorMetadata) Example: from fawlty.resource.mutator import Mutator data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": \"/path/to/mutator_script\", \"timeout\": 3, \"type\": \"pipe\" } a = Mutator(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Mutator class (see example above). MutatorMetadata","title":"Mutator"},{"location":"resources/mutator/#mutator","text":"","title":"Mutator"},{"location":"resources/mutator/#sensu_documentation","text":"Mutator API","title":"Sensu documentation"},{"location":"resources/mutator/#class_mutator","text":"This class represents a Sensu mutator. The fields for a mutator are: command (str) env_vars (list) eval (str) runtime_assets (list) secrets (list) timeout (int) type (str) metadata (MutatorMetadata) Example: from fawlty.resource.mutator import Mutator data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"command\": \"/path/to/mutator_script\", \"timeout\": 3, \"type\": \"pipe\" } a = Mutator(**data) a.set_client(my_client) a.create()","title":"Class: Mutator"},{"location":"resources/mutator/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Mutator class (see example above). MutatorMetadata","title":"Other Classes"},{"location":"resources/namespace/","text":"Namespace \u00b6 Sensu documentation \u00b6 Namespace API Class: Namespace \u00b6 This class represents a Sensu namespace. The fields for a namespace are: name (str) Example: from fawlty.resource.namespace import Namespace data = { \"name\": \"default\", } a = Namespace(**data) a.set_client(my_client) a.create() Other Classes \u00b6 N/A","title":"Namespace"},{"location":"resources/namespace/#namespace","text":"","title":"Namespace"},{"location":"resources/namespace/#sensu_documentation","text":"Namespace API","title":"Sensu documentation"},{"location":"resources/namespace/#class_namespace","text":"This class represents a Sensu namespace. The fields for a namespace are: name (str) Example: from fawlty.resource.namespace import Namespace data = { \"name\": \"default\", } a = Namespace(**data) a.set_client(my_client) a.create()","title":"Class: Namespace"},{"location":"resources/namespace/#other_classes","text":"N/A","title":"Other Classes"},{"location":"resources/overview/","text":"Overview \u00b6 This doc is a general overview of interacting with the resources classes. As much as possible, the interfacing to each object is kept consistent. There are two primary \"types\" of resources - those that require a namespace to be specified and those that do not. Each module contains a class (CamelCase version of the module name) that is the main interface to resources of that type. Common Interfaces \u00b6 These interfaces are common to all resource objects: get \u00b6 Before making a request to get resources, you must have a logged in SensuClient object. Every resource class has a .get class method that can be called to retrive a list of resources. The first argument is a mandatory reference to a SensuClient object. If the specific resource resides within a namespace, that namespace should be the second argument. Example: from fawlty.resources.entity import Entity entities = Entity.get( client=my_sensu_client, # Must be instantiated and logged in namespace=\"default\", # Entity resources require this arg ) This will provide a list of zero or more entities. Any resource objects returned will have been seeded with the client instance used to retrieve them. Most resource objects will also allow the retrieval of a specific resource by including the name argument, indicating the specific name of the resource to be retrieved. set_client \u00b6 Call this method to add a client to a resource instance. Necessary if you wish to write the values from the instance to the sensu server. create \u00b6 To create a new resource, the .create method may be called on an object. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise. update \u00b6 To update the values for a resource that already exists in the Sensu server, use the .update method. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise. delete \u00b6 To delete a resource from the Sensu server, use the .delete method on an instance. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise.","title":"Overview"},{"location":"resources/overview/#overview","text":"This doc is a general overview of interacting with the resources classes. As much as possible, the interfacing to each object is kept consistent. There are two primary \"types\" of resources - those that require a namespace to be specified and those that do not. Each module contains a class (CamelCase version of the module name) that is the main interface to resources of that type.","title":"Overview"},{"location":"resources/overview/#common_interfaces","text":"These interfaces are common to all resource objects:","title":"Common Interfaces"},{"location":"resources/overview/#get","text":"Before making a request to get resources, you must have a logged in SensuClient object. Every resource class has a .get class method that can be called to retrive a list of resources. The first argument is a mandatory reference to a SensuClient object. If the specific resource resides within a namespace, that namespace should be the second argument. Example: from fawlty.resources.entity import Entity entities = Entity.get( client=my_sensu_client, # Must be instantiated and logged in namespace=\"default\", # Entity resources require this arg ) This will provide a list of zero or more entities. Any resource objects returned will have been seeded with the client instance used to retrieve them. Most resource objects will also allow the retrieval of a specific resource by including the name argument, indicating the specific name of the resource to be retrieved.","title":"get"},{"location":"resources/overview/#set_client","text":"Call this method to add a client to a resource instance. Necessary if you wish to write the values from the instance to the sensu server.","title":"set_client"},{"location":"resources/overview/#create","text":"To create a new resource, the .create method may be called on an object. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise.","title":"create"},{"location":"resources/overview/#update","text":"To update the values for a resource that already exists in the Sensu server, use the .update method. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise.","title":"update"},{"location":"resources/overview/#delete","text":"To delete a resource from the Sensu server, use the .delete method on an instance. Requires the set_client method to have been called first. On success, returns a True . Raises an exception otherwise.","title":"delete"},{"location":"resources/role/","text":"Role \u00b6 Sensu documentation \u00b6 Role API Class: Role \u00b6 This class represents a Sensu role. The fields for a role are: rules (list) metadata (RoleMetadata) Example: from fawlty.resource.role import Role data = { \"metadata\": { \"name\": \"basic-read\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"rules\": [ { \"resource_names\": None, \"resources\": [\"entities\", \"checks\", \"events\"], \"verbs\": [\"get\", \"list\"], }, { \"resource_names\": None, \"resources\": [\"namespaces\"], \"verbs\": [\"list\"] }, ] } a = Role(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Role class (see example above). RoleMetadata RoleRule","title":"Role"},{"location":"resources/role/#role","text":"","title":"Role"},{"location":"resources/role/#sensu_documentation","text":"Role API","title":"Sensu documentation"},{"location":"resources/role/#class_role","text":"This class represents a Sensu role. The fields for a role are: rules (list) metadata (RoleMetadata) Example: from fawlty.resource.role import Role data = { \"metadata\": { \"name\": \"basic-read\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"rules\": [ { \"resource_names\": None, \"resources\": [\"entities\", \"checks\", \"events\"], \"verbs\": [\"get\", \"list\"], }, { \"resource_names\": None, \"resources\": [\"namespaces\"], \"verbs\": [\"list\"] }, ] } a = Role(**data) a.set_client(my_client) a.create()","title":"Class: Role"},{"location":"resources/role/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Role class (see example above). RoleMetadata RoleRule","title":"Other Classes"},{"location":"resources/rolebinding/","text":"RoleBinding \u00b6 Sensu documentation \u00b6 RoleBinding API Class: RoleBinding \u00b6 This class represents a Sensu rolebinding. The fields for a rolebinding are: role_ref (RoleBindingRoleRef) subjects (list) metadata (RoleBindingMetadata) Example: from fawlty.resource.rolebinding import RoleBinding data = { \"metadata\": { \"name\": \"kitchenstaff\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"role_ref\": {\"type\": \"role\", \"name\": \"basic-read\"} \"subjects: [ {\"type\": \"User\", \"name\": \"Manuel\"}, {\"type\": \"Group\", \"name\": \"chefs\"} ] } a = RoleBinding(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the RoleBinding class (see example above). RoleBindingMetadata RoleBindingRoleRef RoleBindingSubject","title":"RoleBinding"},{"location":"resources/rolebinding/#rolebinding","text":"","title":"RoleBinding"},{"location":"resources/rolebinding/#sensu_documentation","text":"RoleBinding API","title":"Sensu documentation"},{"location":"resources/rolebinding/#class_rolebinding","text":"This class represents a Sensu rolebinding. The fields for a rolebinding are: role_ref (RoleBindingRoleRef) subjects (list) metadata (RoleBindingMetadata) Example: from fawlty.resource.rolebinding import RoleBinding data = { \"metadata\": { \"name\": \"kitchenstaff\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"role_ref\": {\"type\": \"role\", \"name\": \"basic-read\"} \"subjects: [ {\"type\": \"User\", \"name\": \"Manuel\"}, {\"type\": \"Group\", \"name\": \"chefs\"} ] } a = RoleBinding(**data) a.set_client(my_client) a.create()","title":"Class: RoleBinding"},{"location":"resources/rolebinding/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the RoleBinding class (see example above). RoleBindingMetadata RoleBindingRoleRef RoleBindingSubject","title":"Other Classes"},{"location":"resources/silence/","text":"Silence \u00b6 Sensu documentation \u00b6 Silence API Class: Silence \u00b6 This class represents a Sensu silence. The fields for a silence are: check (str) subscription (str) begin (int) expire (int) expire_at (int) expire_on_resolve (bool) creator (str) reason (str) metadata (SilenceMetadata) Example: from fawlty.resource.silence import Silence data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"begin\": 1735424740, \"check\": \"*\", \"creator\": \"mr_fawlty\", \"expire\": 0, \"expire_at\": None, \"expire_on_resolve\": True, \"reason\": \"I think he is hiding a woman visitor in his room\", \"subscription\": \"entity:room12\", } a = Silence(**data) a.set_client(my_client) a.create() Other Classes \u00b6 These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Silence class (see example above). SilenceMetadata","title":"Silence"},{"location":"resources/silence/#silence","text":"","title":"Silence"},{"location":"resources/silence/#sensu_documentation","text":"Silence API","title":"Sensu documentation"},{"location":"resources/silence/#class_silence","text":"This class represents a Sensu silence. The fields for a silence are: check (str) subscription (str) begin (int) expire (int) expire_at (int) expire_on_resolve (bool) creator (str) reason (str) metadata (SilenceMetadata) Example: from fawlty.resource.silence import Silence data = { \"metadata\": { \"name\": \"test\", \"labels\": {\"donottalkabout\": \"thewar\"}, \"annotations\": {\"hotel\": \"inspectors\"}, \"namespace\": \"default\", }, \"begin\": 1735424740, \"check\": \"*\", \"creator\": \"mr_fawlty\", \"expire\": 0, \"expire_at\": None, \"expire_on_resolve\": True, \"reason\": \"I think he is hiding a woman visitor in his room\", \"subscription\": \"entity:room12\", } a = Silence(**data) a.set_client(my_client) a.create()","title":"Class: Silence"},{"location":"resources/silence/#other_classes","text":"These classes should usually not need to be addressed directly, but can instead be referenced via data structure in the Silence class (see example above). SilenceMetadata","title":"Other Classes"},{"location":"resources/user/","text":"User \u00b6 Sensu documentation \u00b6 User API Class: User \u00b6 This class represents a Sensu user. The fields for a user are: username (str) groups (list) disabled (bool) password (str) metadata (UserMetadata) Example: from fawlty.resource.user import User data = { \"username\": \"polly\", \"groups\": [\"frontdesk\", \"kitchen\", \"waitstaff\"], \"password\": \"Sketchbook123\", \"disabled\": False, } a = User(**data) a.set_client(my_client) a.create() Additional function \u00b6 The fawlty.resource.user module has an additional helper function: hash_password(password) Takes a provided password and hashes it for use with Sensu. Additional Methods \u00b6 The User provides a few methods that are not common to other resources: .change_password(old_password, new_password) Will update the password for the user, presuming the provided old password is correct .disable() Causes the user to be disabled .reinstate() Change's a user's state from disabled to active .reset_password(new_password) Updates the password for the user object. Other Classes \u00b6 These classes should not be used directly. UserPasswordReset UserChangePassword","title":"User"},{"location":"resources/user/#user","text":"","title":"User"},{"location":"resources/user/#sensu_documentation","text":"User API","title":"Sensu documentation"},{"location":"resources/user/#class_user","text":"This class represents a Sensu user. The fields for a user are: username (str) groups (list) disabled (bool) password (str) metadata (UserMetadata) Example: from fawlty.resource.user import User data = { \"username\": \"polly\", \"groups\": [\"frontdesk\", \"kitchen\", \"waitstaff\"], \"password\": \"Sketchbook123\", \"disabled\": False, } a = User(**data) a.set_client(my_client) a.create()","title":"Class: User"},{"location":"resources/user/#additional_function","text":"The fawlty.resource.user module has an additional helper function: hash_password(password) Takes a provided password and hashes it for use with Sensu.","title":"Additional function"},{"location":"resources/user/#additional_methods","text":"The User provides a few methods that are not common to other resources: .change_password(old_password, new_password) Will update the password for the user, presuming the provided old password is correct .disable() Causes the user to be disabled .reinstate() Change's a user's state from disabled to active .reset_password(new_password) Updates the password for the user object.","title":"Additional Methods"},{"location":"resources/user/#other_classes","text":"These classes should not be used directly. UserPasswordReset UserChangePassword","title":"Other Classes"}]}